from kyaml import KYAML
from pkgMng import *
from prompt import *
from writer import *
from os import mkdir


class ProjectConstructor:
  """ Holds functions for generating a project. """

  def __init__(self, _prompt: Prompt) -> None: self.lib, self.prompt = _prompt.get_library(), _prompt

  def gen_project(self) -> None:
    match self.lib:
      case DiscordLibrary.DISCORD_JS: self.__gen_djs_project()
      case DiscordLibrary.DISCORD_PY: self.__gen_dpy_project()
      case DiscordLibrary.PYCORD: self.__gen_pycord_project()
      case DiscordLibrary.JDA: self.__gen_jda_project()
      case DiscordLibrary.CONCORD: self.__gen_concord_project()
      case DiscordLibrary.DISCATSHARP: self.__gen_discatsharp_project()
      case DiscordLibrary.DPP: self.__gen_dpp_project()
      case _: raise KrappyError("unknown library", 1)

  def __gen_djs_project(self) -> None:
    pm = PkgMng.get_js_package_manager()
    install_cmd = ''

    match pm:
      case JSPackageManager.NPM: install_cmd = "npm i"
      case JSPackageManager.PNPM: install_cmd = "pnpm i"
      case JSPackageManager.YARN: install_cmd = "yarn add"
      case JSPackageManager.BUN: install_cmd = "bun add"

    options = self.prompt.get_djs_options()
    options |= self.prompt.get_general_options()
    options |= self.prompt.get_path(str(options["name"]))
    options |= self.prompt.get_token()

    path = str(options["path"]).replace('\\', '/')  # Windows moment...
    lang = str(options["language"])

    # `krappy.yaml`.
    Writer.write_src(f"""# Generated by Krappy, do not edit!\n
options:
  language: {options["language"]}
  module_type: {options["module_type"]}
  name: {options["name"]}
  globalcmds: {options["globalcmds"]}
  path: {path}
  pmi: {install_cmd}
""", "%s/krappy.yaml" %path)

    # `.env`.
    Writer.write_src(f"""TOKEN={options["token"]}
CLIENT_ID={options["clientid"]}
{f"GUILD_ID={options["guildid"]}" if "guildid" in options else ''}
""", "%s/.env" %path)

    # `package.json`.
    Writer.write_src(f"""{{
  "name": "{options["name"]}",
  "version": "1.0.0",
  "description": "Generated with Krappy :)",
  "main": "src/index.{lang}",
  "scripts": {{
    "test": "echo \\"Error: no test specified\\" && exit 1"
  }},
  "keywords": [],
  "author": "",
  "license": "ISC"
}}
""", "%s/package.json" %path)

    # Make directories.
    mkdir("%s/src" %path)
    mkdir("%s/src/commands" %path)
    mkdir("%s/src/commands/misc" %path)
    mkdir("%s/src/events" %path)

    Writer.touch(f"{path}/src/commands/misc/ping.{lang}")
    Writer.touch(f"{path}/src/events/ready.{lang}")
    Writer.touch(f"{path}/src/events/interactionCreate.{lang}")

    if pm == JSPackageManager.BUN:
      # `tsconfig.json | jsconfig.json`.
      Writer.write_src(f"""{{
  "compilerOptions": {{
    "lib": ["ESNext"],
    "module": "esnext",
    "target": "esnext",
    "moduleResolution": "bundler",
    "moduleDetection": "force",
    "allowImportingTsExtensions": true,
    "noEmit": true,
    "composite": true,
    "strict": true,
    "downlevelIteration": true,
    "skipLibCheck": true,
    "jsx": "react-jsx",
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "allowJs": true,
    "types": [
      "bun-types" // add Bun global
    ]
  }}
}}""", f"{path}/{lang}config.json")

    if lang == "ts":  # TypeScript (🔥)\
      # `src/bot.ts`.
      Writer.write_src(f"""import {{ Client, ClientOptions, Collection, ChatInputCommandInteraction }} from 'discord.js';
import {{ Routes }} from 'discord-api-types/v9';
import {{ REST }} from '@discordjs/rest';
""", "%s/src/bot.ts" %path)

      # `src/index.ts`.
      Writer.write_src(f"""import {{ Client, GatewayIntentBits }} from 'discord.js';
""", "%s/src/bot.ts" %path)

    else:  # JavaScript (🗑️)
      ...

    # Install packages and conclude.
    # PkgMng(path, install_cmd, "discord.js", "glob", "dotenv" if not pm == JSPackageManager.BUN else None).install()
    self.conclude(path)

  def conclude(self, _path: str) -> None:
    print("Successfully generated in %s!" %_path)
    exit(0)  # Imported from `prompt.py`.

  def __gen_dpy_project(self) -> None: print("To be supported...")
  def __gen_pycord_project(self) -> None: print("To be supported...")
  def __gen_jda_project(self) -> None: print("To be supported...")
  def __gen_concord_project(self) -> None: print("To be supported...")
  def __gen_discatsharp_project(self) -> None: print("To be supported...")
  def __gen_dpp_project(self) -> None: print("To be supported...")


class CommandConstructor:
  """ Holds functions for generating a command. """

  def __init__(self, _prompt: Prompt) -> None: self.lib, self.prompt = _prompt.get_library(), _prompt

  def gen_command(self) -> None:
    match self.lib:
      case DiscordLibrary.DISCORD_JS: self.__gen_djs_command()
      case DiscordLibrary.DISCORD_PY: self.__gen_dpy_command()
      case DiscordLibrary.PYCORD: self.__gen_pycord_command()
      case DiscordLibrary.JDA: self.__gen_jda_command()
      case DiscordLibrary.CONCORD: self.__gen_concord_command()
      case DiscordLibrary.DISCATSHARP: self.__gen_discatsharp_command()
      case DiscordLibrary.DPP: self.__gen_dpp_command()
      case _: raise KrappyError("unknown library", 1)

  def __gen_djs_command(self) -> None: print("To be supported...")
  def __gen_dpy_command(self) -> None: print("To be supported...")
  def __gen_pycord_command(self) -> None: print("To be supported...")
  def __gen_jda_command(self) -> None: print("To be supported...")
  def __gen_concord_command(self) -> None: print("To be supported...")
  def __gen_discatsharp_command(self) -> None: print("To be supported...")
  def __gen_dpp_command(self) -> None: print("To be supported...")


class EventConstructor:
  """ Holds functions for generating a event. """

  def __init__(self, _prompt: Prompt) -> None: self.lib, self.prompt = _prompt.get_library(), _prompt

  def gen_event(self) -> None:
    match self.lib:
      case DiscordLibrary.DISCORD_JS: self.__gen_djs_event()
      case DiscordLibrary.DISCORD_PY: self.__gen_dpy_event()
      case DiscordLibrary.PYCORD: self.__gen_pycord_event()
      case DiscordLibrary.JDA: self.__gen_jda_event()
      case DiscordLibrary.CONCORD: self.__gen_concord_event()
      case DiscordLibrary.DISCATSHARP: self.__gen_discatsharp_event()
      case DiscordLibrary.DPP: self.__gen_dpp_event()
      case _: raise KrappyError("unknown library", 1)

  def __gen_djs_event(self) -> None: print("To be supported...")
  def __gen_dpy_event(self) -> None: print("To be supported...")
  def __gen_pycord_event(self) -> None: print("To be supported...")
  def __gen_jda_event(self) -> None: print("To be supported...")
  def __gen_concord_event(self) -> None: print("To be supported...")
  def __gen_discatsharp_event(self) -> None: print("To be supported...")
  def __gen_dpp_event(self) -> None: print("To be supported...")
